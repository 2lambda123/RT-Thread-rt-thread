import os
import sys
import rtconfig

# setup RT-Thread Root Path
if os.getenv('RTT_ROOT'):
    RTT_ROOT = os.getenv('RTT_ROOT')
else:
    RTT_ROOT = os.path.normpath(os.getcwd() + '/../../..')

# setup Phytium BSP Root Path
if os.getenv('BSP_ROOT'):
    BSP_ROOT = os.getenv('BSP_ROOT')
else:
    BSP_ROOT = os.path.normpath(os.getcwd() + '/../..')

sys.path = sys.path + [os.path.join(RTT_ROOT, 'tools')]
try:
    from building import *
except:
    print('Cannot found RT-Thread root directory, please check RTT_ROOT')
    print(RTT_ROOT)
    exit(-1)

TARGET = 'rtthread_a32.' + rtconfig.TARGET_EXT

DefaultEnvironment(tools=[])
env = Environment(tools = ['mingw'],
    AS = rtconfig.AS, ASFLAGS = rtconfig.AFLAGS,
    CC = rtconfig.CC, CFLAGS = rtconfig.CFLAGS,
    CXX = rtconfig.CXX, CXXFLAGS = rtconfig.CXXFLAGS,
    AR = rtconfig.AR, ARFLAGS = '-rc',
    LINK = rtconfig.LINK, LINKFLAGS = rtconfig.LFLAGS)
env.PrependENVPath('PATH', rtconfig.EXEC_PATH)
env['ASCOM'] = env['ASPPCOM']

Export('RTT_ROOT')
Export('BSP_ROOT')
Export('rtconfig')

if RTT_ROOT == 'rt-thread':
    BSP_ROOT = '.' # if bsp has been exported for IDE
else:
    BSP_ROOT = RTT_ROOT + '/bsp/phytium'

if os.path.exists(BSP_ROOT + '/libraries'):
    libraries_path_prefix = BSP_ROOT + '/libraries'
else:
    libraries_path_prefix = os.path.dirname(BSP_ROOT) + '/libraries'

BSP_LIB = libraries_path_prefix
Export('BSP_LIB')

if os.path.exists(BSP_ROOT + '/board'):
    board_path_prefix = BSP_ROOT + '/board'
else:
    board_path_prefix = os.path.dirname(BSP_ROOT) + '/board'

BSP_BOARD = board_path_prefix
Export('BSP_BOARD')

if os.path.exists(BSP_ROOT + '/applications'):
    app_path_prefix = BSP_ROOT + '/applications'
else:
    app_path_prefix = os.path.dirname(BSP_ROOT) + '/applications'

BSP_APP = app_path_prefix
Export('BSP_APP')

# print dir
print('RTT_ROOT = {}'.format(RTT_ROOT))
print('BSP_ROOT = {}'.format(BSP_ROOT))
print('BSP_BOARD = {}'.format(BSP_BOARD))
print('BSP_LIB = {}'.format(BSP_LIB))
print('BSP_APP = {}'.format(BSP_APP))

# prepare building environment
objs = PrepareBuilding(env, RTT_ROOT, has_libcpu = False)

# include libraries
objs.extend(SConscript(os.path.join(libraries_path_prefix, 'SConscript')))

# include board
objs.extend(SConscript(os.path.join(board_path_prefix, 'SConscript')))

# include application
objs.extend(SConscript(os.path.join(app_path_prefix, 'SConscript')))

# make a building
DoBuilding(TARGET, objs)

